var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
//var require: Require;
require && require.config({ paths: { 'vs': 'vendor/monaco-editor/min/vs' } });
/**
 * An implementation of the Monaco editor
 * @namespace RED.editor.monaco
 */
var RED;
(function (RED) {
    var editor;
    (function (editor_1) {
        var Monaco;
        (function (Monaco) {
            var USE_MONACO;
            var monacoThemes = ["vs", "vs-dark", "hc-black"];
            ;
            ;
            var MonacoEditor = /** @class */ (function () {
                function MonacoEditor(target, outputTarget, onReady, initialCode) {
                    if (!target)
                        throw "new MonacoEditor(target, outputTarget): 'target' is required (string or element value).";
                    if (!outputTarget)
                        throw "new MonacoEditor(target, outputTarget): 'outputTarget' handler is required.";
                    if (typeof outputTarget != 'function')
                        throw "new MonacoEditor(target, outputTarget): 'outputTarget' is not a function.";
                    if (onReady && typeof onReady != 'function')
                        throw "new MonacoEditor(target, outputTarget): 'onReady' is not a function.";
                    this.target = target instanceof HTMLElement ? target : document.getElementById(target);
                    if (!(this.target instanceof HTMLElement))
                        throw "new MonacoEditor(target, outputTarget): 'target' is invalid.";
                    this.outputTarget = outputTarget;
                    this.onReady = onReady;
                    this.initialCode = initialCode && '' + initialCode || '';
                }
                MonacoEditor.prototype.getEditorSettings = function () {
                    if (RED.settings && RED.settings.editor) {
                        return RED.settings.editor;
                    }
                    console.log("getEditorSettings - RED.settings.editor is empty. Defaulting to MONACO");
                    return {
                        lib: "MONACO",
                        theme: "vs"
                    }; //TODO: get from runtime settings
                };
                MonacoEditor.prototype.initialize = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var _this = this;
                        return __generator(this, function (_a) {
                            if (!require)
                                throw "'RequireJS' is not loaded.";
                            //if (!ts)
                            //    throw "'ts' TypeScript service namespace reference is required - is the 'ace/mode/typescript/typescriptServices.js' file loaded?.";
                            console.log("initialize(): Creating the Monaco editor promise ...");
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    console.log("initialize(): Loading the Monaco editor ...");
                                    require(['vs/editor/editor.main'], function (main) {
                                        if (!main) {
                                            var msg = "initialize(): Failed loading 'vs/editor/editor.main'. Make sure 'node_modules\\monaco-editor' exists, as the project will copy it to 'wwwroot\\js'.";
                                            (console.error || console.log)(msg);
                                            throw msg;
                                            return;
                                        }
                                        console.log("initialize(): Creating the Monaco editor ...");
                                        main.languages.typescript.typescriptDefaults.addExtraLib("var ctx: { x: string, y: string };");
                                        // ... load the editors ...
                                        Monaco.activeEditor = _this._editor = main.editor.create(_this.target, {
                                            automaticLayout: true,
                                            value: _this.initialCode || '',
                                            language: 'typescript'
                                        });
                                        // this._outputEditor = main.editor.create(this.outputTarget, {
                                        //     automaticLayout: true,
                                        //     readOnly: true,
                                        //     codeLens: false,
                                        //     contextmenu: false,
                                        //     value: [
                                        //         '// Output JS does here ...'
                                        //     ].join('\n'),
                                        //     language: 'javascript'
                                        // });
                                        var sync = function () {
                                            if (_this._tsServiceProxy)
                                                setTimeout(function () {
                                                    _this._tsServiceProxy.getEmitOutput(_this._editor.getModel().uri.toString())
                                                        .then(function (r) {
                                                        _this.outputTarget(_this, _this._editor.getValue(), r.outputFiles[0].text);
                                                        // console.log("Code updated: " + r.outputFiles[0].text);
                                                    });
                                                }, 500);
                                        };
                                        _this._editor.onDidChangeModelContent(sync);
                                        console.log("initialize(): Monaco editors created. Getting the TS worker ...");
                                        // ... get the typescript service ...
                                        monaco.languages.typescript.getTypeScriptWorker().then(function (workerProxy) {
                                            console.log("initialize(): Got the TS worker proxy. Getting the service next ...");
                                            var fileUri = _this._editor.getModel().uri;
                                            workerProxy(fileUri).then(function (tsProxy) {
                                                console.log("initialize(): Got the TS worker service proxy:");
                                                console.log(tsProxy);
                                                _this.__tsProxy = tsProxy;
                                                _this._tsServiceProxy = tsProxy;
                                                _this._tsServiceProxy.getEmitOutput(fileUri.toString()).then(function (r) {
                                                    // ... execute any "ready" callbacks ...
                                                    // this._outputEditor.setValue(r.outputFiles[0].text);
                                                    _this._editor.setValue(_this.onReady(_this, _this._editor.getValue()));
                                                    resolve(_this);
                                                });
                                            });
                                        }, function (reason) { reject("Error getting TypeScript service worker: " + reason); });
                                    }, function (msg) {
                                        console.log("initialize(): Failed loading the Monaco editor");
                                        reject("Failed loading 'FlowScript/ace/ace_ts_editor_main' module: " + msg + "\r\n" + (msg.stack || ""));
                                    });
                                })];
                        });
                    });
                };
                /**
                 * Loads an array of library files by URL.
                 */
                MonacoEditor.prototype.loadLibFiles = function (libFiles) { monaco.languages.typescript.typescriptDefaults.addExtraLib("class ctx { x:0; }"); };
                MonacoEditor.prototype.loadFile = function (filename) { };
                MonacoEditor.prototype.setCode = function (text) { };
                MonacoEditor.prototype.setOutput = function (text) { };
                MonacoEditor.prototype.getCode = function () { return null; /*this._tsService.getCode();*/ };
                MonacoEditor.prototype.getOutput = function () { return null; /*this._tsService.getOutput();*/ };
                return MonacoEditor;
            }());
            Monaco.MonacoEditor = MonacoEditor;
        })(Monaco = editor_1.Monaco || (editor_1.Monaco = {}));
    })(editor = RED.editor || (RED.editor = {}));
})(RED || (RED = {}));
//# sourceMappingURL=monaco.js.map